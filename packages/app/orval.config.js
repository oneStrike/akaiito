module.exports = {
  api: {
    input: {
      target: 'https://api.akaiito.com/wp-json/zib-app/v1/openapi.json',
    },
    output: {
      mode: 'tags-split',
      target: 'src/apis',
      schemas: 'src/apis/types',
      client: 'fetch',
      httpClient: 'fetch',
      clean: true,
      prettier: true,
      override: {
        mutator: {
          path: 'src/utils/httpHandler.ts',
          name: 'default',
        },
        operations: {
          // 自定义操作名生成规则
          operationName: (operation, route, verb) => {
            // 解析路径，获取倒数第二位作为模块名
            const pathSegments = route
              .split('/')
              .filter(
                (segment) =>
                  segment && !segment.startsWith('{') && !segment.endsWith('}'),
              )

            // 获取倒数第二位作为模块前缀
            const modulePrefix =
              pathSegments.length >= 2
                ? pathSegments[pathSegments.length - 2]
                : pathSegments[pathSegments.length - 1] || 'api'

            // 获取最后一位作为操作名
            const operationSuffix =
              pathSegments[pathSegments.length - 1] || 'action'

            // 生成操作名：verb + modulePrefix + operationSuffix + Api
            const operationName = `${verb}${modulePrefix.charAt(0).toUpperCase() + modulePrefix.slice(1)}${operationSuffix.charAt(0).toUpperCase() + operationSuffix.slice(1)}Api`

            return operationName.replace(/-([a-z])/g, (_, letter) =>
              letter.toUpperCase())
          },
        },
        header: (info) => [
          `/**`,
          ` * Generated by Orval`,
          ` * Do not edit manually.`,
          ` * ${info.title}`,
          ` */`,
        ],
        query: {
          useQuery: false,
          useMutation: false,
        },
      },
    },
  },
}
